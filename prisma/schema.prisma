// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?         @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole        @default(USER)
  accounts              String[]        // Array of Account IDs
  isTwoFactorEnabled    Boolean         @default(false)
  twoFactorConfirmation String?         // ID of TwoFactorConfirmation

  // Additional fields from the Airbnb project
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  favoriteIds           String[]        @db.ObjectId
  listings              Listing[]
  reservations          Reservation[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  // Relation to User (optional, only if it doesn't disturb Auth.js)
  // user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  userId        String        @db.ObjectId
  price         Int

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
}

model Reservation {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  listingId  String    @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
